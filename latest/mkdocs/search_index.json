{
    "docs": [
        {
            "location": "/", 
            "text": "NaturalSelection.jl\n\n\n \n \n \n \n \n \n\n\nDevelopment builds:\n \n \n \n\n\n\n\nDescription\n\n\nNaturalSelection.jl provides methods for detecting the presence, strength and effects of natural selection, in biological data.\n\n\n\n\nInstallation\n\n\nInstall NaturalSelection.jl from the Julia REPL:\n\n\njulia\n \nPkg\n.\nadd\n(\nNaturalSelection\n)\n\n\n\n\n\n\nIf you are interested in the cutting edge of the development, please check out the master branch to try new features before release.", 
            "title": "Home"
        }, 
        {
            "location": "/#naturalselectionjl", 
            "text": "Development builds:", 
            "title": "NaturalSelection.jl"
        }, 
        {
            "location": "/#description", 
            "text": "NaturalSelection.jl provides methods for detecting the presence, strength and effects of natural selection, in biological data.", 
            "title": "Description"
        }, 
        {
            "location": "/#installation", 
            "text": "Install NaturalSelection.jl from the Julia REPL:  julia   Pkg . add ( NaturalSelection )   If you are interested in the cutting edge of the development, please check out the master branch to try new features before release.", 
            "title": "Installation"
        }, 
        {
            "location": "/dNdS/", 
            "text": "dN / dS\n\n\nThe \nNaturalSelection.dNdS\n module provides several different methods of inferring the action of natural selection from coding sequences.\n\n\nEvolutionary pressures on proteins are often quantified by the ratio of substitution rates at non-synonymous and synonymous sites i.e. dN/dS.\n\n\nThe dN/dS ratio was originally developed for application to distantly diverged sequences, the differences among which represent substitutions that have fixed along independent lineages.\n\n\nNevertheless, the dN/dS measure is often applied to sequences sampled from a single population, the differences among which represent segregating polymorphisms. However, do be careful if this is what you are doing, as it has been demonstrated that dN/dS is not always suitable for such purposes \n(Sergey Kryazhimskiy \n Joshua B. Plotkin, 2008)\n.\n\n\n\n\nThe NG86 method\n\n\n#\n\n\nNaturalSelection.dNdS.dNdS_NG86\n \n \nFunction\n.\n\n\ndNdS_NG86(x, y, k::Float64 = 1.0, code::GeneticCode)\n\n\n\n\n\nCompute dN and dS, using the \nNei and Goborjei 1986\n method.\n\n\nThis function requires two iterables \nx\n and \ny\n, which yield \nDNACodon\n or \nRNACodon\n type variables. These two types are defined in the BioSequences package.\n\n\nsource\n\n\ndNdS_NG86(x::BioSequence{A}, y::BioSequence{A}, k::Float64, code::GeneticCode) where {A \n: NucAlphs}\n\n\n\n\n\nCompute dN and dS, using the \nNei and Goborjei 1986\n method.\n\n\nThis method adds conveinience when working with DNA or RNA sequences, by taking two sequences, and creating two vectors of aligned codons from them. These two iterables are then passed into the generic NG86 method.\n\n\nsource\n\n\n#\n\n\nNaturalSelection.dNdS.S_N_NG86\n \n \nFunction\n.\n\n\nS_N_NG86(codon::C, k::Float64, code::GeneticCode) where {C \n: CDN}\n\n\n\n\n\nEnumerate the number of synonymous (S) and non-synonymous (N) sites in a codon, using the method used by \nNei and Goborjei (1986)\n.\n\n\nReturns a tuple where S is the first element and N is the second (S, N).\n\n\nEach site in a codon may be both partially synonymous and non-synonymous.\n\n\nsource\n\n\n#\n\n\nNaturalSelection.dNdS.DS_DN_NG86\n \n \nFunction\n.\n\n\nDS_DN_NG86(x::C, y::C, code::GeneticCode) where C \n: CDN\n\n\n\n\n\nCompute the number of synonymous (DS) and non-synonymous (DN) mutations between two codons, using the all paths method used by the \nNei and Goborjei (1986)\n.\n\n\nsource", 
            "title": "dNdS"
        }, 
        {
            "location": "/dNdS/#dn-ds", 
            "text": "The  NaturalSelection.dNdS  module provides several different methods of inferring the action of natural selection from coding sequences.  Evolutionary pressures on proteins are often quantified by the ratio of substitution rates at non-synonymous and synonymous sites i.e. dN/dS.  The dN/dS ratio was originally developed for application to distantly diverged sequences, the differences among which represent substitutions that have fixed along independent lineages.  Nevertheless, the dN/dS measure is often applied to sequences sampled from a single population, the differences among which represent segregating polymorphisms. However, do be careful if this is what you are doing, as it has been demonstrated that dN/dS is not always suitable for such purposes  (Sergey Kryazhimskiy   Joshua B. Plotkin, 2008) .", 
            "title": "dN / dS"
        }, 
        {
            "location": "/dNdS/#the-ng86-method", 
            "text": "#  NaturalSelection.dNdS.dNdS_NG86     Function .  dNdS_NG86(x, y, k::Float64 = 1.0, code::GeneticCode)  Compute dN and dS, using the  Nei and Goborjei 1986  method.  This function requires two iterables  x  and  y , which yield  DNACodon  or  RNACodon  type variables. These two types are defined in the BioSequences package.  source  dNdS_NG86(x::BioSequence{A}, y::BioSequence{A}, k::Float64, code::GeneticCode) where {A  : NucAlphs}  Compute dN and dS, using the  Nei and Goborjei 1986  method.  This method adds conveinience when working with DNA or RNA sequences, by taking two sequences, and creating two vectors of aligned codons from them. These two iterables are then passed into the generic NG86 method.  source  #  NaturalSelection.dNdS.S_N_NG86     Function .  S_N_NG86(codon::C, k::Float64, code::GeneticCode) where {C  : CDN}  Enumerate the number of synonymous (S) and non-synonymous (N) sites in a codon, using the method used by  Nei and Goborjei (1986) .  Returns a tuple where S is the first element and N is the second (S, N).  Each site in a codon may be both partially synonymous and non-synonymous.  source  #  NaturalSelection.dNdS.DS_DN_NG86     Function .  DS_DN_NG86(x::C, y::C, code::GeneticCode) where C  : CDN  Compute the number of synonymous (DS) and non-synonymous (DN) mutations between two codons, using the all paths method used by the  Nei and Goborjei (1986) .  source", 
            "title": "The NG86 method"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing\n\n\nWe appreciate contributions from users including reporting bugs, fixing issues, improving performance and adding new features.\n\n\nIf you have a question about contributing or using this package, you are encouraged to use the \nBio category of the Julia discourse site\n.\n\n\nDetailed guidance for contributing to all BioJulia packages is provided at the \nBioJulia Contribution Documentation\n.\n\n\nHere we list specific details about contributing and maintainership pertaining specifically to the NaturalSelection.jl package.\n\n\n\n\nNamed maintainers\n\n\nThe named maintainers of this package is Ben Ward. It is their responsibility to make final choices about pull requests and issues, although because of our community structure, you will find other maintainers assisting them.\n\n\n\n\nBranching model\n\n\nThe branching model used to develop and make releases of this package is the \nOneFlow\n model summarized in the \nBioJulia Contribution Documentation", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#contributing", 
            "text": "We appreciate contributions from users including reporting bugs, fixing issues, improving performance and adding new features.  If you have a question about contributing or using this package, you are encouraged to use the  Bio category of the Julia discourse site .  Detailed guidance for contributing to all BioJulia packages is provided at the  BioJulia Contribution Documentation .  Here we list specific details about contributing and maintainership pertaining specifically to the NaturalSelection.jl package.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#named-maintainers", 
            "text": "The named maintainers of this package is Ben Ward. It is their responsibility to make final choices about pull requests and issues, although because of our community structure, you will find other maintainers assisting them.", 
            "title": "Named maintainers"
        }, 
        {
            "location": "/contributing/#branching-model", 
            "text": "The branching model used to develop and make releases of this package is the  OneFlow  model summarized in the  BioJulia Contribution Documentation", 
            "title": "Branching model"
        }
    ]
}